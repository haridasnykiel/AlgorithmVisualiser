@page "/pathfinder"
@using AlgorithmVisualiser.Web.Helpers
@using AlgorithmVisualiser.Web.Models

<PageTitle>PathFinders</PageTitle>

<h1>PathFinders</h1>

<p>Path Finding Algorithms!!!</p>

<button class="btn btn-primary" @onclick="Reset">Reset</button>
<button class="btn btn-primary" @onclick="Bfs">Breadth First Search</button>
<button class="btn btn-primary" @onclick="Dfs">Depth First Search</button>

@if (_nodes == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="maze">
        @foreach (var node in _nodes)
        {
            @if (_startNode == null)
            {
                <button class="maze-node" @onclick="@(e => SetStartNode(node))"
                        style=@node.Style>@node.Value @node.Column @node.Row</button>
            }
            else
            {
                <button class="maze-node" @onclick="@(e => SetDestinationNode(node))"
                        style=@node.Style>@node.Value @node.Column @node.Row</button>
            }

            if (node.Row >= MaxRowSize)
            {
                <div class="line-break"></div>
            }
        }
    </div>
}

@code {
    private GraphNode[]? _nodes;
    private const int MaxRowSize = 10;
    private List<(int Column, int Row)>? _directions;
    private GraphNode? _startNode;
    private string? _destinationNodeValue;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        Randomise();
        _directions = new List<(int, int)> { (1, 0), (0, 1), (1, 1), (-1, 0), (0, -1), (-1, -1) };
        AddNodePositions();
        AddAllConnections();
    }

    private void Randomise()
    {
        _nodes = NodesHelpers.Create100GraphNodes();
    }

    private void AddAllConnections()
    {
        if (_nodes == null) return;
        if (_directions == null) return;

        foreach (var node in _nodes)
        {
            foreach (var direction in _directions)
            {
                var nextNodeColumn = node.Column + direction.Column;
                var nextNodeRow = node.Row + direction.Row;

                var nextNode = _nodes.FirstOrDefault(n => n.Column == nextNodeColumn && n.Row == nextNodeRow);

                if (nextNode != null)
                {
                    node.AddConnection(nextNode);
                }
            }
        }
    }

    private void AddNodePositions()
    {
        if (_nodes == null) return;
        var rowIdx = 0;
        var columnIdx = 0;

        foreach (var node in _nodes)
        {
            node.AddColumnIdx(columnIdx);
            node.AddRowIdx(rowIdx);
            rowIdx++;

            if (rowIdx >= MaxRowSize)
            {
                columnIdx++;
                rowIdx = 0;
            }
        }
    }

    private async Task Bfs()
    {
        if (_nodes == null) return;

        if (_startNode == null || string.IsNullOrEmpty(_destinationNodeValue)) return;
        var node = await BreadthFirstSearch(_startNode, _destinationNodeValue);
        if (node == null)
        {
            Console.WriteLine("Node Not found");
        }

        node.AddFoundStyle();
        StateHasChanged();
        await Task.Delay(25);

        Console.WriteLine($"{node.Column}, {node.Row}, {node.Value}");
    }

    private async Task<GraphNode?> BreadthFirstSearch(GraphNode startingNode, string pin)
    {
        var visited = new HashSet<string>();
        var queue = new Queue<GraphNode>();

        queue.Enqueue(startingNode);
        visited.Add(startingNode.Value);
        startingNode.AddVisitedStyle();
        StateHasChanged();
        await Task.Delay(25);

        GraphNode? result = null;
        while (queue.Count > 0)
        {
            var node = queue.Dequeue();
            if (node.Value == pin)
            {
                result = node;
                break;
            }

            foreach (var edge in node.Connections)
            {
                if (edge == null || visited.Contains(edge.Value))
                {
                    continue;
                }

                visited.Add(edge.Value);
                queue.Enqueue(edge);
                edge.AddVisitedStyle();
                StateHasChanged();
                await Task.Delay(25);

                if (edge.Value == pin)
                {
                    result = edge;
                    break;
                }
            }

            if (result != null) break;
        }

        return result;
    }

    private async Task Dfs()
    {
        if (_nodes == null) return;

        if (_startNode == null || string.IsNullOrEmpty(_destinationNodeValue)) return;
        var node = await DepthFirstSearch(_startNode, new HashSet<string>(), _destinationNodeValue);
        if (node == null)
        {
            Console.WriteLine("Node Not found");
        }

        node.AddFoundStyle();
        StateHasChanged();
        await Task.Delay(25);

        Console.WriteLine($"{node.Column}, {node.Row}, {node.Value}");
    }

    private async Task<GraphNode?> DepthFirstSearch(GraphNode node, HashSet<string> visited, string pin)
    {
        if (node.Value == pin) return node;

        visited.Add(node.Value);

        node.AddVisitedStyle();
        StateHasChanged();
        await Task.Delay(25);

        GraphNode? result = null;
        foreach (var edge in node.Connections)
        {
            if (edge == null) continue;

            if (visited.Contains(edge.Value)) continue;

            result = await DepthFirstSearch(edge, visited, pin);

            Console.WriteLine($"{result?.Value}");

            if (result?.Value == pin) break;
        }

        return result;
    }

    private void SetStartNode(GraphNode startNode)
    {
        _startNode = startNode;
        _startNode.AddStartNodeStyle();
        StateHasChanged();
    }

    private void SetDestinationNode(GraphNode destinationNode)
    {
        _destinationNodeValue = destinationNode.Value;
        destinationNode.AddDestinationNodeStyle();
        StateHasChanged();
    }

    private void Reset()
    {
        _startNode = null;
        _destinationNodeValue = null;
        foreach (var node in _nodes)
        {
            node.RemoveBackgroundStyle();
        }

        StateHasChanged();
    }

}
