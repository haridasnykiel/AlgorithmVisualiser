@page "/sorting"
@using AlgorithmVisualiser.Web.Components
@using AlgorithmVisualiser.Web.Helpers
@using AlgorithmVisualiser.Web.Models

<PageTitle>Sorting</PageTitle>

<h1>Sorting</h1>

<p>Sorting Algorithms!!!</p>

<button class="btn btn-primary" @onclick="Randomise">Randomise</button>
<button class="btn btn-primary" @onclick="MergeSort">Merge Sort</button>
<button class="btn btn-primary" @onclick="QuickSort">Quick Sort</button>
<button class="btn btn-primary" @onclick="SelectionSort">Selection Sort</button>
<button class="btn btn-primary" @onclick="BubbleSort">Bubble Sort</button>
<button class="btn btn-primary" @onclick="HeapSort">Heap Sort</button>

@if (_nodes == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @switch (_sortType)
    {
        case SortType.MergeSort:
            <MergeSort Nodes=@_nodes ShouldSort=@_shouldSort/>
            break;
        case SortType.QuickSort:
            <QuickSort Nodes=@_nodes ShouldSort=@_shouldSort/>
            break;
        case SortType.SelectionSort:
            <SelectionSort Nodes=@_nodes ShouldSort=@_shouldSort/>
            break;
        case SortType.BubbleSort:
            <BubbleSort Nodes=@_nodes ShouldSort=@_shouldSort/>
            break;
        case SortType.HeapSort:
            <HeapSort Nodes=@_nodes ShouldSort=@_shouldSort/>
            break;
        default:
            <div class="graph">
                @foreach (var node in _nodes)
                {
                    <div class="node" style=@node.Style></div>
                }
            </div>
            break;
    }
}

@code {
    private SortNode[]? _nodes;
    private SortType _sortType;
    private bool _shouldSort;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        _shouldSort = false;
        _sortType = SortType.None;
        Randomise();
    }

    private void Randomise()
    {
        _shouldSort = false;
        _sortType = SortType.None;
        _nodes = NodesHelpers.Randomise();
    }

    private void MergeSort()
    {
        _sortType = SortType.MergeSort;
        _shouldSort = true;
    }

    private void QuickSort()
    {
        _sortType = SortType.QuickSort;
        _shouldSort = true;
    }

    private void SelectionSort()
    {
        _sortType = SortType.SelectionSort;
        _shouldSort = true;
    }

    private void BubbleSort()
    {
        _sortType = SortType.BubbleSort;
        _shouldSort = true;
    }

    private void HeapSort()
    {
        _sortType = SortType.HeapSort;
        _shouldSort = true;
    }
}