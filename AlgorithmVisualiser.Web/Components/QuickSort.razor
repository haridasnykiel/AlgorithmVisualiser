@using AlgorithmVisualiser.Web.Models

<div class="graph">
    @if (Nodes != null) {
        @foreach (var node in Nodes)
        {
            <div class="node" style=@node.Style></div>
        }
    }
</div>

@code {

    [Parameter]
    public SortNode[]? Nodes { get; set; }

    [Parameter]
    public bool ShouldSort { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(50);
        if (Nodes != null && ShouldSort)
        {
            var delay = 25;
            await Sort(Nodes, 0, Nodes.Length - 1, delay);
        }
    }

    private async Task Sort(SortNode[] nodes, int iS, int iE, int delay) {

        if (iS >= iE)
        {
            return;
        }

        var pivotIdx = await Partition(nodes, iS, iE, delay);

        await Sort(nodes, iS, pivotIdx - 1, delay);
        await Sort(nodes, pivotIdx + 1, iE, delay);
    }

    private async Task<int> Partition(SortNode[] nodes, int iS, int iE, int delay)
    {
        var pivot = nodes[iE];

        var idx = iS - 1;

        for (var i = iS; i < iE; i++)
        {
            if (nodes[i].Value <= pivot.Value)
            {
                idx++;
                (nodes[i], nodes[idx]) = (nodes[idx], nodes[i]);
                nodes[i].AddSwapStyle();
                nodes[idx].AddSwapStyle();
                await StateChangedAndDelay(delay);
                nodes[i].RemoveBackgroundStyle();
                nodes[idx].RemoveBackgroundStyle();
                await StateChangedAndDelay(delay);
            }
        }

        idx++;
        nodes[iE] = nodes[idx];
        nodes[idx] = pivot;
        nodes[iE].AddSwapStyle();
        nodes[idx].AddSwapStyle();
        await StateChangedAndDelay(delay);
        nodes[iE].RemoveBackgroundStyle();
        nodes[idx].RemoveBackgroundStyle();
        await StateChangedAndDelay(delay);

        return idx;
    }

    private async Task StateChangedAndDelay(int delay)
    {
        StateHasChanged();
        await Task.Delay(delay);
    } 
}